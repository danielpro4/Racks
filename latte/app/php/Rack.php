<?php
/**
 * Stub generated by xlatte
 */
class Rack extends rackBase{

    /**
     * @remote
     * @param string $name
     * @return Rack
     */
    public static function byName($name) {
        $rack = DL::oneOf('Rack', "SELECT * FROM rack WHERE name = '$name'");

        $levels = $rack->getLevels();

        foreach ($levels as $level) {
            $level->locations = $level->getLocations();
        }

        // Append levels
        $rack->levels = $levels;

        return $rack;
    }

    /**
     * @remote
     * @return Rack[]
     * @throws Exception
     */
    public static function catalog()
    {
        return DL::arrayOf('Rack', "SELECT * FROM rack");
    }

    /**
     * @remote
     * @param int $idproduct
     * @param int $nLevels
     * @param int $nLocations
     * @return Rack
     * @throws Exception
     */
    public static function register($idproduct = 1, $nLevels = 4, $nLocations = 15)
    {
        // Creamos nuevo Rack en la base de datos
        $rack = new Rack();
        $rack->name = uniqid('rack-');
        $rack->insert();

        $arrLevels = [];

        // Verificamos sí se insertó correctamente
        if ($rack->isInserted()) {
            //1. Crear niveles y asignarlos al rack creado actual
            for ($i = 0; $i < $nLevels; $i++) {
                $level = Level::create($rack->idrack);

                if ($level->isInserted()) {

                    // Almacenamiento temporal
                    $rack->levels[] = $level;

                    // 2. Creamos una ubicación por cada nivel requerido
                    for ($j = 0; $j < $nLocations; $j++) {
                        // Llamada al método crear location
                        $location = Location::create($level->idlevel, $idproduct);

                        // Asignamos las ubicaciones al rack creado
                        $level->locations[] = $location;
                    }
                }
            }

            // Asignamos los niveles al rack creado


        } else {
            throw new Exception('El nuevo rack no pudo crearse correctamente');
        }

        return $rack;
    }

    /**
     * @return boolean
     */
    public function canDelete()
    {
        return true;
    }

    /**
     * Obtiene un arreglo con los niveles del rack relacionados.
     *
     * @return Level[]
     */
    public function getLevels() {
        return DL::arrayOf('Level', "SELECT * FROM `level` WHERE idrack = '$this->idrack'");
    }

    /**
     * @var Level[]
     */
    public $levels;

    /**
     * @override
     * @param array $array
     */
    public function onPacked(array &$array) {
        if (count($this->levels) > 0) {
            $array['properties']['levels'] = DataRecord::packArray($this->levels);
        }
    }

    /**
     * Este método se ejecuta antes de realizar la inserción en la base de datos
     * - Registramos la fecha del sistema
     *
     * @return bool|void
     */
    public function onInserting() {
        $this->created = DL::dateTime();
    }

    /**
     * Evento que se ejeucta después de eliminar el record
     */
    public function onDelete()
    {
        $items = $this->getLevels();
        foreach ($items as $item) {
            $item->delete();
        }
    }
}