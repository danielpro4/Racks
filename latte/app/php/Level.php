<?php
/**
 * Stub generated by xlatte
 */
class Level extends levelBase{

    /**
     * Crear un nuevo registro de tipo Rack para el rack especificado en el parámetro
     *
     * @param int $idrack
     * @return Level
     */
    public static function create($idrack) {
        $level = new Level();
        $level->idrack = $idrack;
        $level->insert();

        return $level;
    }

    /**
     * Obtiene un arreglo con los niveles del rack relacionados.
     *
     * @return Location[]
     */
    public function getLocations() {
        return DL::arrayOf('Location', "SELECT * FROM `location` WHERE idlevel = '$this->idlevel'");
    }

    /**
     * @var Location[]
     */
    public $locations;

    /**
     * @override
     * @param array $array
     */
    public function onPacked(array &$array) {
        if (count($this->locations) > 0) {
            $array['properties']['locations'] = DataRecord::packArray($this->locations);
        }
    }

    /**
     * Este método se ejecuta antes de realizar la inserción en la base de datos
     * - Registramos la fecha del sistema
     *
     * @return bool|void
     */
    public function onInserting() {
        $this->created = DL::dateTime();
    }

    /**
     * Evento que se ejeucta después de eliminar el record
     */
    public function onDelete()
    {
        $items = $this->getLocations();
        foreach ($items as $item) {
            $item->delete();
        }
    }
}